@use 'sass:math';

@function rem($pixel) {
    @if math.is-unitless($pixel) {
        @return math.div($pixel, 16)+rem;
    }

    @else {
        @error 'Don\'t use units when using the rem() function; only numbers.';
    }
}


$breakpoints: (xs: (min: rem(414),
        max: rem(413.98)),
    sm: (min: rem(576),
        max: rem(575.98)),
    md: ( // min: rem(768),
        // max: rem(767.98)
        min: rem(992),
        max: rem(991.98)),
    lg: (min: rem(1200),
        max: rem(1199.98)),
    xl: (min: rem(1400),
        max: rem(1399.98)),
    xxl: ( //   min: rem(1920),
        //   max: rem(1919.98)
        min: rem(2560),
        max: rem(2559.98)),
    xxxl: (min: rem(2860),
        max: rem(2759.98)));

@mixin breakpoint($breakpoint, $direction: min) {

    //check if the supplied breakpoint exists in our breakpoits map
    @if map-has-key($breakpoints, $breakpoint) {
        $breakpoint-values: map-get($breakpoints, $breakpoint);
        $breakpoint-min: map-get($breakpoint-values, min);
        $breakpoint-max: map-get($breakpoint-values, max);

        //check if we are writing styles for larger or smaller screens
        @if $direction==min {
            @media (min-width: $breakpoint-min) {
                @content;
            }
        }

        @else {
            @media (max-width: $breakpoint-max) {
                @content;
            }
        }

        // use the custom value if the breakpoint is not part of the pre-defined list
    }

    @else {

        @if $direction==min {
            @media (min-width: $breakpoint) {
                @content;
            }
        }

        @else {
            @media (max-width: $breakpoint) {
                @content;
            }
        }
    }
}

@mixin basicList() {
    list-style: none;
    margin: 0;
    padding: 0;
}
// @mixin button() {
//     align-items: center;
//     background: var(--button-bg);
//     border-radius: var(--border-radius);
//     border: none;
//     color: var(--button-colour);
//     cursor: pointer;
//     display: inline-flex;
//     min-height: rem(55);
//     justify-content: center;
//     font-size: rem(16);
//     font-weight: var(--fw-bold);
//     line-height: 1;
//     padding: 0 rem(30);
//     text-decoration: none;
//     transition: var(--hover-transition);

//     @media not all and (hover: none) {
//         &:hover {
//             background: var(--button-hover-bg);
//             color: var(--button-hover-colour);
//             transform: scale(1.03);
//         }
//     }

//     @include breakpoint(lg) {
//         font-size: rem(18);
//     }

// }
